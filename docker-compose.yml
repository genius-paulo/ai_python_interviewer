version: '3.9'

services:
  pgdb:
    image: postgres:15-alpine
    container_name: pgdb
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "127.0.0.1:5432:5432"
    hostname: ${DB_HOST}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: redis:7-alpine
    container_name: redis
    command: [
      "redis-server",
      "--requirepass", "${REDIS_PASSWORD}",
      "--replicaof", "no", "one",
      "--bind", "redis 127.0.0.1",  # Разрешаем подключения по имени контейнера и localhost
      "--protected-mode", "no",     # Отключаем для внутренней сети
      "--save", ""                 # Отключаем сохранение на диск (если не нужно)
    ]
    user: "redis"
    ports:
      - "127.0.0.1:6379:6379"      # Доступ только с хоста
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redisdata:/data
    networks:
      - backend

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: telegram-bot
    command: sh -c "python src/db/migrate.py && python src/main.py"
    restart: always
    env_file:
      - .env
    depends_on:
      - pgdb
      - redis
    volumes:
      - ./src:/app/src
    networks:
      - backend

networks:
  backend:
    driver: bridge
    internal: false  # Разрешаем доступ между контейнерами

volumes:
  pgdata:
  redisdata:
  grafana_data:
