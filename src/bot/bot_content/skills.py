from pydantic import BaseModel
from loguru import logger
from typing import TypeVar
import random

T = TypeVar('T', bound='Skill')


class Skills(BaseModel):
    short_name: str
    short_description: str
    long_description: str
    questions: list

    @classmethod
    def get_all_skills(cls) -> list:
        """Функция нужна для того, чтобы получать список всех дочерних скиллов"""
        return [child for child in cls.__subclasses__() if child is not cls]

    @classmethod
    def get_skill_by_name(cls, skill_name) -> T:
        """Функция нужна для того, чтобы получать скилл по атрибуту short_name"""
        skill_classes_list = cls.get_all_skills()
        logger.debug(f'Вот такой список классов: {skill_classes_list}')
        for skill in skill_classes_list:
            logger.debug(f'Проходим класс {skill}')
            if skill().short_name == skill_name:
                return skill()
        raise AttributeError

    @classmethod
    def get_question_by_id(cls, question_id) -> T:
        """Функция нужна для того, чтобы получать скилл по атрибуту id"""
        return cls().questions[question_id]

    @classmethod
    def get_random_question(cls) -> T:
        """Функция нужна для того, чтобы получать скилл по атрибуту id"""
        question_id = random.randint(0, len(cls().questions) - 1)
        return cls().questions[question_id]


class Basic(Skills):
    short_name: str = 'basic'
    short_description: str = 'Основы Python'
    long_description: str = 'Подробное описание навыка Основы Python'
    questions: list = [
        'Что такое динамическая типизация в Python?',
        'Какие основные типы данных существуют в Python?',
        'Чем отличается int от float?',
        'Что означает значение None в Python?',
        'Назовите основные арифметические операторы в Python.',
        'Что делает оператор присваивания "="?',
        'Какой оператор используется для проверки равенства двух значений?',
        'В чем разница между операторами "==" и "is"?',
        'Объясните работу оператора "in".',
        'Как работает условный оператор if в Python?',
        'Что такое блок elif и как он используется?',
        'Как работает цикл for в Python?',
        'Когда используется цикл while и как он работает?',
        'Можно ли прервать выполнение цикла досрочно? Как это сделать?',
        'Какие способы форматирования строк вы знаете в Python?',
        'Что такое f-строка и как она используется?',
        'Напишите пример использования метода format().',
        'Как можно объединить две строки в Python?',
        'Как проверить наличие подстроки в строке?',
        'Чем отличаются списки от кортежей?',
        'Как добавить новый элемент в множество?',
        'Как получить значение по ключу из словаря?',
        'Как удалить элемент из списка?',
        'Как узнать длину словаря?',
        'Как определить функцию в Python?',
        'Что такое область видимости переменной в контексте функций?',
        'Как передать аргумент в функцию по умолчанию?',
        'Как вернуть несколько значений из функции?',
        'Как работают лямбда-функции в Python?',
        'Что такое рекурсивная функция?',
        'Приведите пример простой рекурсивной функции.',
        'Почему важно учитывать условие завершения при написании рекурсивной функции?',
        'Какая максимальная глубина рекурсии возможна в Python?',
        'Какие преимущества и недостатки у рекурсии по сравнению с итерацией?'
    ]


class OOP(Skills):
    short_name: str = 'oop'
    short_description: str = 'ООП'
    long_description: str = 'Подробное описание навыка ООП'
    questions: list = [
        "Что такое класс в Python?",
        "Чем отличается класс от объекта?",
        "Как создать объект класса?",
        "Что такое наследование в Python и как оно реализуется?",
        "Приведите пример полиморфизма в Python.",
        "Какие уровни доступа существуют в Python и как они реализуются?",
        "Какой специальный метод вызывается при создании экземпляра класса?",
        "В чем отличие методов `__repr__` и `__str__`?",
        "Как реализовать сравнение объектов с помощью специальных методов?",
        "Отличие метода класса от обычного метода.",
        "Когда стоит использовать статический метод?",
        "Как объявить и вызвать статический метод в классе?",
        "Что такое абстрактный класс в Python?",
        "Как создается абстрактный класс с использованием модуля `abc`?",
        "Зачем нужны абстрактные классы и интерфейсы?",
        "Что такое декоратор в Python?",
        "Как написать декоратор для метода класса?",
        "Можно ли применить декоратор к классу?",
        "Назовите три основных паттерна проектирования и приведите примеры их применения в Python.",
        "Опишите реализацию паттерна Singleton в Python.",
        "Почему важно понимать паттерн MVC и как он применяется в веб-разработке?"
    ]


class StandardLib(Skills):
    short_name: str = 'standard_lib'
    short_description: str = 'Стандартная библиотека'
    long_description: str = 'Подробное описание навыка Стандартная библиотека'
    questions: list = [
        "Какие основные модули входят в стандартную библиотеку Python?",
        "Что делает модуль `os` и какие его основные функции?",
        "Как с помощью модуля `sys` получить доступ к аргументам командной строки?",
        "Какие возможности предоставляет модуль `datetime` для работы с датами и временем?",
        "Как с помощью модуля `math` вычислить квадратный корень числа?",
        "Какие основные функции модуля `collections` и зачем они используются?",
        "Как с помощью модуля `itertools` генерировать последовательности чисел?",
        "Какие основные функции модуля `json` и как они применяются?",
        "Как с помощью модуля `csv` читать данные из CSV файла?",
        "Какие основные функции модуля `shutil` и зачем они используются?",
        "Как с помощью модуля `tempfile` создавать временные файлы и директории?",
        "Какие основные функции модуля `hashlib` и как они применяются?",
        "Как с помощью модуля `logging` настроить журналирование событий в приложении?",
        "Какие основные функции модуля `argparse` и зачем они используются?",
        "Как с помощью модуля `socket` установить сетевое соединение?",
        "Какие основные функции модуля `subprocess` и зачем они используются?",
        "Как с помощью модуля `threading` запустить параллельные потоки выполнения?",
        "Какие основные функции модуля `queue` и зачем они используются?",
        "Как с помощью модуля `inspect` получить информацию о функциях и объектах?",
        "Какие основные функции модуля `urllib` и зачем они используются?"
    ]


class AsyncProg(Skills):
    short_name: str = 'async_prog'
    short_description: str = 'Асинхронное программирование'
    long_description: str = 'Подробное описание навыка Асинхронное программирование'
    questions: list = [
        "Что такое асинхронное программирование и зачем оно нужно?",
        "Как в Python создаются и выполняются асинхронные функции?",
        "Что такое корутина в Python и как она отличается от обычной функции?",
        "Как использовать ключевое слово `await` в асинхронном коде?",
        "Что такое событие в асинхронном программировании и как оно обрабатывается?",
        "Как в Python осуществляется переключение контекста между задачами?",
        "Что такое цикл событий и как он работает в асинхронном программировании?",
        "Как с помощью модуля `asyncio` организовать параллельную обработку нескольких задач?",
        "Как в Python создаются и управляются задачи (tasks)?",
        "Как избежать блокировки основного потока в асинхронном коде?",
        "Что такое future в асинхронном программировании и как оно используется?",
        "Как обрабатывать исключения в асинхронных функциях?",
        "Как с помощью модуля `aiohttp` выполнять асинхронные HTTP-запросы?",
        "Как в Python организовать взаимодействие между несколькими асинхронными функциями?",
        "Как использовать контекстные менеджеры в асинхронном коде?",
        "Как организовать обмен данными между разными задачами в асинхронном коде?",
        "Как с помощью модуля `asyncio` работать с таймаутами и отменой задач?",
        "Как организовать потокобезопасный доступ к общим ресурсам в асинхронном коде?",
        "Как с помощью модуля `asyncio` взаимодействовать с синхронным кодом?",
        "Как измерять производительность асинхронного кода и выявлять узкие места?"
    ]


class DB(Skills):
    short_name: str = 'db'
    short_description: str = 'Работа с базами данных'
    long_description: str = 'Подробное описание навыка Работа с базами данных'
    questions: list = [
        "Как правильно спроектировать архитектуру базы данных для высоконагруженного приложения?",
        "Какие подходы к распределению нагрузки на базу данных вы знаете и как их применять в Python?",
        "Как использовать шардинг для масштабируемости базы данных в Python?",
        "Как оптимизировать запросы к базе данных для повышения производительности?",
        "Как использовать индексы для ускорения поиска данных в базе данных?",
        "Как обеспечить консистентность данных в распределённой системе баз данных?",
        "Как выбрать подходящую систему управления базами данных (СУБД) для вашего проекта?",
        "Как организовать резервное копирование и восстановление базы данных в Python?",
        "Как настроить репликацию данных между основными и резервными серверами базы данных?",
        "Как провести мониторинг состояния базы данных и её производительности в реальном времени?",
        "Как проводить аудит и анализ использования базы данных для выявления узких мест?",
        "Как реализовать кэширование данных для уменьшения нагрузки на базу данных?",
        "Как использовать ORM (SQLAlchemy) для работы с реляционными базами данных в Python?",
        "Как выполнять миграции схемы базы данных с помощью Alembic?",
        "Как защитить приложение от SQL-инъекций при работе с базой данных?",
        "Как реализовать полнотекстовый поиск в базе данных с помощью Python?",
        "Как выполнять массовые операции с данными в базе данных с минимальными затратами ресурсов?",
        "Как проводить аудит и анализ использования базы данных для выявления узких мест?",
        "Как использовать пул соединений для улучшения производительности работы с базой данных?",
        "Как обеспечить высокую доступность базы данных в вашем приложении?"
    ]


class Web(Skills):
    short_name: str = 'web'
    short_description: str = 'Веб-фреймворки и RESTful API'
    long_description: str = 'Подробное описание навыка Веб-фреймворки и RESTful API'
    questions: list = [
        "Какие основные фреймворки для веб-разработки на Python вы знаете и как их используете?",
        "Как настроить маршрутизацию в Django и как работают URL-пути?",
        "Как создать простую RESTful API с использованием Flask?",
        "Как работать с шаблонами в Django и как передавать данные в них?",
        "Как реализовать аутентификацию пользователей в веб-приложении на Python?",
        "Как настроить сессию пользователя и управлять состоянием сессии в веб-приложении?",
        "Как реализовать защиту от CSRF атак в веб-приложении на Python?",
        "Как работать с формами в Django и как валидировать введенные пользователем данные?",
        "Как настроить администраторскую панель в Django и как добавлять модели в нее?",
        "Как реализовать кэширование страниц и данных в веб-приложении на Python?",
        "Как настроить деплой веб-приложения на Python на сервере?",
        "Как работать с моделями в Django и как создавать миграции?",
        "Как реализовать отправку email уведомлений пользователям в веб-приложении на Python?",
        "Как работать с статическими файлами и медиафайлами в Django?",
        "Как реализовать загрузку файлов пользователями в веб-приложении на Python?",
        "Как настроить тестирование веб-приложения на Python с использованием pytest или unittest?",
        "Как реализовать пагинацию данных в веб-приложении на Python?",
        "Как работать с AJAX-запросами в веб-приложении на Python?",
        "Как настроить SSL-сертификат для безопасного подключения к вашему веб-приложению?",
        "Как реализовать авторизацию через социальные сети (OAuth) в веб-приложении на Python?"
    ]


class Test(Skills):
    short_name: str = 'test'
    short_description: str = 'Тестирование'
    long_description: str = 'Подробное описание навыка Тестирование'
    questions: list = [
        "Какие основные виды тестов вы знаете и как их классифицируете?",
        "Как настроить и использовать модуль `unittest` для написания юнит-тестов в Python?",
        "Как настроить и использовать модуль `pytest` для написания тестов в Python?",
        "Как писать тесты для асинхронного кода в Python?",
        "Как имитировать поведение внешних зависимостей с помощью mock-объектов в Python?",
        "Как тестировать RESTful API, созданное на Flask или Django?",
        "Как измерить покрытие кода тестами с помощью инструмента `coverage`?",
        "Как настроить интеграционное тестирование для веб-приложения на Python?",
        "Как использовать фикстуры в тестах для подготовки данных перед выполнением теста?",
        "Как тестировать работу с базой данных в Python?",
        "Как тестировать работу с файлами и файловой системой в Python?",
        "Как тестировать работу с сетевыми запросами в Python?",
        "Как тестировать работу с временными метками и датами в Python?",
        "Как тестировать работу с исключениями в Python?",
        "Как тестировать работу с конфигурациями и настройками приложения в Python?",
        "Как тестировать работу с консольными скриптами в Python?",
        "Как тестировать работу с многопоточным и многопроцессорным кодом в Python?",
        "Как тестировать работу с регулярными выражениями в Python?",
        "Как тестировать работу с сериализацией и десериализацией данных в Python?",
        "Как тестировать работу с кэшем в Python?"
    ]


class Docs(Skills):
    short_name: str = 'docs'
    short_description: str = 'Документация и стиль кода'
    long_description: str = 'Подробное описание навыка Документация и стиль кода'
    questions: list = [
        "Какие стандарты оформления кода (style guides) вы знаете и как их применяете в своих проектах на Python?",
        "Как документировать функции и классы в Python с использованием docstrings?",
        "Как использовать инструмент `pylint` для анализа качества кода в Python?",
        "Как использовать инструмент `flake8` для проверки соблюдения PEP 8 в Python?",
        "Как использовать инструмент `mypy` для статической типизации в Python?",
        "Как комментировать код в Python и какие правила комментирования вы соблюдаете?",
        "Как писать понятные и информативные сообщения об ошибках в Python?",
        "Как использовать инструменты для автоматической генерации документации, такие как Sphinx?",
        "Как соблюдать принцип DRY (Don't Repeat Yourself) в своем коде на Python?",
        "Как следовать принципу KISS (Keep It Simple, Stupid) при разработке на Python?",
        "Как использовать именование переменных, функций и классов в соответствии с PEP 8?",
        "Как документировать публичные и приватные методы в классах на Python?",
        "Как использовать аннотации типов в Python для улучшения читаемости кода?",
        "Как оформлять длинные выражения и строки в Python для улучшения читаемости?",
        "Как документировать сложные алгоритмы и бизнес-логику в Python?",
        "Как использовать инструменты для автоматического форматирования кода, такие как `black`?",
        "Как соблюдать принцип YAGNI (You Aren't Gonna Need It) при разработке на Python?",
        "Как использовать инструменты для проверки качества документации, такие как `pydocstyle`?",
        "Как соблюдать принцип SOLID при проектировании классов и модулей в Python?",
        "Как документировать API на Python, чтобы оно было понятно другим разработчикам?"
    ]


class DevOps(Skills):
    short_name: str = 'devops'
    short_description: str = 'Контроль версий, CI/CD, контейнеры'
    long_description: str = 'Подробное описание навыка Контроль версий, CI/CD, контейнеры'
    questions: list = [
        "Какие инструменты непрерывной интеграции (CI) вы знаете и как их используете в своих проектах на Python?",
        "Как настроить автоматическое развёртывание (CD)?",
        "Как настроить мониторинг и логирование для вашего приложения на Python?",
        "Как настроить контейнеризацию вашего приложения на Python с использованием Docker?",
        "Как настроить оркестровку контейнеров с использованием Kubernetes?",
        "Как настроить сборку и развёртывание вашего приложения на Python с использованием GitLab CI/CD или Jenkins?",
        "Как настроить автоматическое тестирование вашего приложения на Python в CI/CD пайплайне?",
        "Как настроить деплоймент вашего приложения на Python в облачные сервисы?",
        "Как настроить автоматизированное обновление зависимостей в вашем проекте на Python?",
        "Как настроить бэкап и восстановление данных для вашего приложения на Python?",
        "Как настроить автоматическое масштабирование вашего приложения на Python в зависимости от нагрузки?",
        "Как настроить мониторинг производительности вашего приложения на Python?",
        "Как настроить безопасное хранение секретов и конфигурационных данных в вашем проекте на Python?",
        "Как настроить мониторинг безопасности вашего приложения на Python?",
        "Как настроить деплоймент вашего приложения на Python в продакшн-среду с нулевым временем простоя?",
        "Как настроить автоматическое обновление версий вашего приложения на Python в продакшене?",
        "Как настроить мониторинг доступности вашего приложения на Python с использованием Pingdom или UptimeRobot?",
        "Как настроить автоматизированное восстановление после сбоев в вашем приложении на Python?",
        "Как настроить деплоймент вашего приложения на Python в гибридную инфраструктуру (локально и в облаке)?"
    ]


class Efficiency(Skills):
    short_name: str = 'efficiency'
    short_description: str = 'Проблемы производительности'
    long_description: str = 'Подробное описание навыка Проблемы производительности'
    questions: list = [
        "Какие инструменты профилирования кода вы знаете и как их используете в Python?",
        "Как найти и устранить узкие места в производительности вашего приложения на Python?",
        "Как использовать многопоточность и мультипроцессорность в Python для увеличения производительности?",
        "Как использовать асинхронное программирование в Python для улучшения производительности?",
        "Как использовать кеширование для улучшения производительности вашего приложения на Python?",
        "Как оптимизировать работу с памятью в Python для повышения производительности?",
        "Как использовать JIT-компиляцию с Numba для ускорения числовых вычислений в Python?",
        "Как использовать Cython для ускорения критических участков кода в Python?",
        "Как использовать векторизацию с NumPy для ускорения операций с массивами в Python?",
        "Как использовать параллельные вычисления с Dask для ускорения сложных расчетов в Python?",
        "Как использовать мемоизацию для ускорения часто вызываемых функций в Python?",
        "Как оптимизировать работу с файлами и дисковым вводом-выводом в Python?",
        "Как использовать профилирование памяти для нахождения утечек памяти в Python?",
        "Как оптимизировать работу с сетью в Python для снижения задержек?",
        "Как использовать предкомпилированные байт-коды для ускорения запуска вашего приложения на Python?",
        "Как использовать профилирование времени выполнения для оптимизации длительных операций в Python?",
        "Как использовать специализированные библиотеки для ускорения специфичных задач в Python?",
        "Как использовать предварительную компиляцию регулярных выражений для ускорения работы с текстом в Python?"
    ]


class Additional(Skills):
    short_name: str = 'additional'
    short_description: str = 'Паттерны проектирования'
    long_description: str = 'Подробное описание навыка Паттерны проектирования'
    questions: list = [
        "Какие паттерны проектирования вы знаете и как их применяете в Python?",
        "Как реализовать паттерн Singleton в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Factory Method в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Observer в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Decorator в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Strategy в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Adapter в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Command в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Template Method в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Facade в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Proxy в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Composite в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Iterator в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн State в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Mediator в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Memento в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Chain of Responsibility в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Builder в Python и в каких случаях его следует использовать?",
        "Как реализовать паттерн Flyweight в Python и в каких случаях его следует использовать?"
    ]


class Algorithms(Skills):
    short_name: str = 'algorithms'
    short_description: str = 'Структуры данных и алгоритмы'
    long_description: str = 'Подробное описание навыка Структуры данных и алгоритмы'
    questions: list = [
        "Какие основные структуры данных вы знаете и как их использовать в Python?",
        "Как работает хеш-таблица в Python и как ее использовать для оптимизации поиска?",
        "Как работает двоичное дерево поиска и как его реализовать в Python?",
        "Как работает очередь с приоритетом и как ее реализовать в Python?",
        "Как работает стек и как его использовать для решения задач с LIFO?",
        "Как работает очередь и как ее использовать для решения задач с FIFO?",
        "Как работает граф и как его использовать для решения задач на графах?",
        "Как работает сортировка слиянием и как ее реализовать в Python?",
        "Как работает быстрая сортировка и как ее реализовать в Python?",
        "Как работает бинарный поиск и как его реализовать в Python?",
        "Как работает алгоритм DFS и BFS для обхода графа и как их реализовать в Python?",
        "Как работает алгоритм Dijkstra для поиска кратчайшего пути в графе и как его реализовать в Python?",
        "Как работает алгоритм Prim для построения минимального остовного дерева и как его реализовать в Python?",
        "Как работает алгоритм Kruskal для объединения кластеров и как его реализовать в Python?",
        "Как работает алгоритм A* для поиска оптимального пути и как его реализовать в Python?",
        "Как работает алгоритм Knuth-Morris-Pratt для поиска подстрок и как его реализовать в Python?",
        "Как работает алгоритм Rabin-Karp для поиска подстрок и как его реализовать в Python?",
        "Как работает алгоритм Karatsuba для быстрого умножения больших чисел и как его реализовать в Python?",
        "Как работает алгоритм Strassen для быстрого умножения матриц и как его реализовать в Python?"
    ]


if __name__ == '__main__':
    # Проверяем получение рандомного вопроса из рандомного скилла
    skills = Skills.get_all_skills()
    for skill in skills:

        logger.info(f'Скилл: {skill().short_description}. Вопрос: {skill().get_random_question()}')
